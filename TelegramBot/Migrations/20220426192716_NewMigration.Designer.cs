// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using WebServer.Db;

#nullable disable

namespace TelegramBot.Migrations
{
    [DbContext(typeof(SessionsDbContext))]
    [Migration("20220426192716_NewMigration")]
    partial class NewMigration
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "6.0.4")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder, 1L, 1);

            modelBuilder.Entity("SharedLibrary.Agent", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("EnvironmentId")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Ion")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Isotope")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("IsotopeEnvironment")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<float>("LPP")
                        .HasColumnType("real");

                    b.Property<float>("LPPSetupError")
                        .HasColumnType("real");

                    b.Property<float>("Mileage")
                        .HasColumnType("real");

                    b.Property<float>("MileageSetupError")
                        .HasColumnType("real");

                    b.Property<float>("ObjectEnergySetupError")
                        .HasColumnType("real");

                    b.Property<float>("ObjectSurfaceEnergy")
                        .HasColumnType("real");

                    b.Property<int>("SessionId")
                        .HasColumnType("int");

                    b.Property<float>("WireEnergy")
                        .HasColumnType("real");

                    b.HasKey("Id");

                    b.ToTable("Agents");
                });

            modelBuilder.Entity("SharedLibrary.EnvironmentIndicators", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<float>("Humidity")
                        .HasColumnType("real");

                    b.Property<float>("Pressure")
                        .HasColumnType("real");

                    b.Property<string>("ReadTime")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<float>("Temperature")
                        .HasColumnType("real");

                    b.HasKey("Id");

                    b.ToTable("EnvironmentIndicatorsList");
                });

            modelBuilder.Entity("SharedLibrary.SessionData", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("AdmissionReportNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("AgentId")
                        .HasColumnType("int");

                    b.Property<float?>("Angle")
                        .HasColumnType("real");

                    b.Property<float?>("Error")
                        .HasColumnType("real");

                    b.Property<float?>("Heterogeneity")
                        .HasColumnType("real");

                    b.Property<int?>("IndicatorsId")
                        .HasColumnType("int");

                    b.Property<float?>("K")
                        .HasColumnType("real");

                    b.Property<float?>("LeftHeterogeneity")
                        .HasColumnType("real");

                    b.Property<float?>("OD1")
                        .HasColumnType("real");

                    b.Property<float?>("OD2")
                        .HasColumnType("real");

                    b.Property<float?>("OD3")
                        .HasColumnType("real");

                    b.Property<float?>("OD4")
                        .HasColumnType("real");

                    b.Property<float>("ODAverage")
                        .HasColumnType("real");

                    b.Property<string>("Objects")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Organization")
                        .HasColumnType("nvarchar(max)");

                    b.Property<float?>("RightHeterogeneity")
                        .HasColumnType("real");

                    b.Property<float?>("SessionFlowIntensity")
                        .HasColumnType("real");

                    b.Property<int>("SessionNumber")
                        .HasColumnType("int");

                    b.Property<float?>("SessionTemperature")
                        .HasColumnType("real");

                    b.Property<float?>("TD1")
                        .HasColumnType("real");

                    b.Property<float?>("TD2")
                        .HasColumnType("real");

                    b.Property<float?>("TD3")
                        .HasColumnType("real");

                    b.Property<float?>("TD4")
                        .HasColumnType("real");

                    b.Property<float?>("TD5")
                        .HasColumnType("real");

                    b.Property<float?>("TD6")
                        .HasColumnType("real");

                    b.Property<float?>("TD7")
                        .HasColumnType("real");

                    b.Property<float?>("TD8")
                        .HasColumnType("real");

                    b.Property<float?>("TD9")
                        .HasColumnType("real");

                    b.Property<float>("TDAverage")
                        .HasColumnType("real");

                    b.Property<int>("TimingId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("AgentId");

                    b.HasIndex("IndicatorsId");

                    b.HasIndex("TimingId");

                    b.ToTable("Sessions");
                });

            modelBuilder.Entity("SharedLibrary.SessionTiming", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("BreakEndTime")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("BreakStartTime")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("EndTime")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("HasTechnicalBreak")
                        .HasColumnType("bit");

                    b.Property<string>("IrradiationDuration")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("StartTime")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("SessionTiming");
                });

            modelBuilder.Entity("SharedLibrary.SessionData", b =>
                {
                    b.HasOne("SharedLibrary.Agent", "Agent")
                        .WithMany()
                        .HasForeignKey("AgentId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("SharedLibrary.EnvironmentIndicators", "Indicators")
                        .WithMany()
                        .HasForeignKey("IndicatorsId");

                    b.HasOne("SharedLibrary.SessionTiming", "Timing")
                        .WithMany()
                        .HasForeignKey("TimingId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Agent");

                    b.Navigation("Indicators");

                    b.Navigation("Timing");
                });
#pragma warning restore 612, 618
        }
    }
}
